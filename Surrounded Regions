class Solution {
public:

   void dfs(vector<vector<char>>& board , vector<vector<int>>& visited , int i , int j){
       
       if(i >= board.size() || j >= board[0].size() || i < 0 || j < 0 || board[i][j] != 'O' || visited[i][j] == 1){
           return;
       }
       visited[i][j] = 1;
     dfs(board , visited , i + 1 , j);
     dfs(board , visited , i -1 , j);
     dfs(board , visited , i  , j + 1);
     dfs(board , visited , i  , j-1);
   }
    void solve(vector<vector<char>>& board) {
        
    const int m = board.size();
    const int n = board[0].size();

        vector<vector<int>> visited(m , vector<int>(n,0));

        for(int i = 0 ; i < m ; i++){
            dfs(board , visited , i , 0);
        }

        for(int i = 0 ; i < m ; i++){
            dfs(board , visited , i , n-1);
        }
        
         for(int j = 0 ; j < n ; j++){
            dfs(board , visited , 0 , j);
        }

         for(int j = 0 ; j < n ; j++){
            dfs(board , visited , m-1 , j);
        }

      for(int i = 0 ; i < m ; i++){
          for(int j = 0 ; j < n ; j++){
              if(board[i][j] == 'O' && visited[i][j] == 0){
                  board[i][j] = 'X';
              }
          }
      }
    }
};
